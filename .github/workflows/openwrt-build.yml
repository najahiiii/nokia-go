name: Build OpenWrt Package

on:
  push:
    branches: [main]
    paths-ignore:
      - "**.md"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write
    env:
      PACKAGE_NAME: luci-app-nokia-go

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build binary
        run: |
          mkdir -p build
          RAW_VERSION=$(tr -d '\n' < VERSION)
          BASE_VERSION=${RAW_VERSION#v}
          if [ -z "$BASE_VERSION" ]; then
            BASE_VERSION="$RAW_VERSION"
          fi
          GIT_COMMIT=$(git rev-parse --short HEAD)
          if git diff --quiet --ignore-submodules HEAD; then
            GIT_DIRTY=false
          else
            GIT_DIRTY=true
          fi
          CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build \
            -trimpath \
            -ldflags="-s -w -X main.appVersion=${BASE_VERSION} -X main.gitCommit=${GIT_COMMIT} -X main.gitDirty=${GIT_DIRTY}" \
            -o build/nokia ./cmd/server

      - name: Compress binary with UPX
        uses: crazy-max/ghaction-upx@v3
        with:
          version: latest
          files: build/nokia
          args: -q --best --lzma

      - name: Prepare package
        id: prep
        run: |
          RAW_HASH="$(git describe --tags --dirty=-modified --always 2>/dev/null || echo ${GITHUB_SHA::7})"
          RAW_BASE_VERSION="$(tr -d '\n' < VERSION)"
          BASE_VERSION="${RAW_BASE_VERSION#v}"
          if [ -z "$BASE_VERSION" ]; then
            BASE_VERSION="$RAW_BASE_VERSION"
          fi
          TRIMMED_HASH="${RAW_HASH#v}"

          if [ "$TRIMMED_HASH" = "$BASE_VERSION" ]; then
            VERSION="$BASE_VERSION"
          elif [ "${TRIMMED_HASH#${BASE_VERSION}-}" != "$TRIMMED_HASH" ]; then
            VERSION="$TRIMMED_HASH"
          else
            VERSION="${BASE_VERSION}-${TRIMMED_HASH}"
          fi

          REPO="${{ github.repository }}"

          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "PACKAGE_VERSION=$VERSION" >> "$GITHUB_ENV"
          VERSION_LABEL="v${VERSION}"
          echo "VERSION_LABEL=$VERSION_LABEL" >> "$GITHUB_ENV"
          echo "ARTIFACT_NAME=${PACKAGE_NAME}-${VERSION_LABEL}" >> "$GITHUB_ENV"

          install -d -m 0755 package/root/usr/sbin
          install -d -m 0755 package/root/etc/init.d
          install -d -m 0755 package/root/CONTROL

          install -m 0755 build/nokia package/root/usr/sbin/nokia
          install -m 0755 services/nokia package/root/etc/init.d/nokia
          sed -e "s/__VERSION__/${VERSION}/" \
              -e "s#__REPOSITORY__#${REPO}#" openwrt/control > package/root/CONTROL/control

      - name: Build IPK package
        run: |
          DIST_DIR="$(pwd)/dist"
          TMP_BUILD="$(mktemp -d)"
          mkdir -p "$DIST_DIR"
          chmod +x .github/scripts/ipkg-build
          PKG_TMPDIR="$TMP_BUILD" .github/scripts/ipkg-build package/root "$DIST_DIR"

      - name: Generate feed index
        id: index
        run: |
          set -e
          ARCH="$(tar -xzOf dist/*.ipk ./control.tar.gz | tar -xzOf - ./control | awk -F': ' '/^Architecture:/ {print $2; exit}')"
          echo "arch=$ARCH" >> "$GITHUB_OUTPUT"

          REPO_DIR="repo/${ARCH}"
          mkdir -p "$REPO_DIR"
          cp -a dist/*.ipk "$REPO_DIR/"

          chmod +x .github/scripts/mkhash
          chmod +x .github/scripts/ipkg-make-index

          (cd "$REPO_DIR" && MKHASH="$GITHUB_WORKSPACE/.github/scripts/mkhash" "$GITHUB_WORKSPACE/.github/scripts/ipkg-make-index" . > Packages)
          gzip -9k "$REPO_DIR/Packages"

          head -n 20 "$REPO_DIR/Packages" || true
          zcat "$REPO_DIR/Packages.gz" | head -n 20 || true

      - name: Upload artifact (IPKs)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: repo/*/*.ipk

      - name: Upload artifact (repo index)
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}-repo-${{ steps.index.outputs.arch }}
          path: |
            repo/*/Packages
            repo/*/Packages.gz

      - name: Upload releases
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ github.ref_name }}
          file: repo/**
          file_glob: true
          overwrite: true
          make_latest: true

      - name: Prepare Pages content
        run: |
          set -euo pipefail
          SITE_DIR="site"
          ROOT_TPL=".github/pages/index.html.tpl"
          ARCH_TPL=".github/pages/arch-index.html.tpl"

          [ -f "$ROOT_TPL" ] && [ -f "$ARCH_TPL" ] || { echo "Missing template files"; exit 1; }

          mkdir -p "$SITE_DIR"
          cp -a repo "$SITE_DIR/"

          touch "$SITE_DIR/.nojekyll"

          ARCH_LIST_FILE="$(mktemp)"
          for d in $(find repo -mindepth 1 -maxdepth 1 -type d | sort); do
            arch="$(basename "$d")"
            printf '<li><a href="repo/%s/">repo/%s/</a></li>\n' "$arch" "$arch" >> "$ARCH_LIST_FILE"

            FILE_LIST_FILE="$(mktemp)"
            for f in $(ls -1 "$d"); do
              printf '<li><a href="%s">%s</a></li>\n' "$f" "$f" >> "$FILE_LIST_FILE"
            done

            mkdir -p "$SITE_DIR/repo/$arch"
            sed -e "s/{{ARCH}}/${arch}/g" "$ARCH_TPL" | \
              awk -v fl="$FILE_LIST_FILE" '
                /{{FILE_LIST}}/ { while ((getline line < fl) > 0) print line; next }
                { print }
              ' > "$SITE_DIR/repo/$arch/index.html"

            rm -f "$FILE_LIST_FILE"
          done

          awk -v lf="$ARCH_LIST_FILE" '
            /{{ARCH_LIST}}/ { while ((getline line < lf) > 0) print line; next }
            { print }
          ' "$ROOT_TPL" > "$SITE_DIR/index.html"

          rm -f "$ARCH_LIST_FILE"

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
